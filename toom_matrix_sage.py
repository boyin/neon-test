

# This file was *autogenerated* from the file /home/by/m4/neon-test/toom_matrix.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_11 = Integer(11); _sage_const_8192 = Integer(8192)#!/usr/bin/env python3

def cmod (a,b) :
    assert (b>_sage_const_0 )
    r = (a % b)
    if (r >= b/_sage_const_2 ) : return (r-b)
    else : return r

def find_zeta (q, n) :
    for i in range(_sage_const_2 ,q) :
        prod = i
        for j in range(_sage_const_2 ,n) :
            prod *= i
            prod %= q
            if (prod == _sage_const_1 ) : break
        if (j == n-_sage_const_1  and prod * i % q == _sage_const_1 ) : return (cmod(i,q))

def Toom_Matrix (K,q=_sage_const_0 ) :
    # input is the size of the toom and the modulus
    assert (K == int(K) and K >= _sage_const_3 )
    # output is a 2-dimensional array, the Toom interpolation matrix mod q
    points_eval = [_sage_const_0 ] + list(range(K)) + list(range(-K+_sage_const_2 ,_sage_const_0 ))
    # points_eval[1]=inf points_eval[0]=0
    matrix_eval = [[_sage_const_1 ] + [_sage_const_0 ] * (_sage_const_2 *K-_sage_const_2 ), [_sage_const_0 ] * (_sage_const_2 *K-_sage_const_2 ) + [_sage_const_1 ]]
    for i in range(_sage_const_2 ,_sage_const_2 *K-_sage_const_1 ) :
        matrix_eval += [[points_eval[i]**j for j in range(_sage_const_2 *K-_sage_const_1 )]]
    matrix_interpol = getMatrixInverse(matrix_eval,q)

    matrix_eval = list(map(lambda L: L[:K], matrix_eval))
    matrix_eval[_sage_const_1 ][K-_sage_const_1 ] = _sage_const_1 
    return((matrix_eval,
            matrix_interpol))

def Toom_Matrix2 (K,q) :
    # input is the size of the toom
    assert (K == int(K) and K >= _sage_const_3 )
    # output is a 2-dimensional array, the Toom interpolation matrix mod q
    matrix_eval = matrix(QQ, _sage_const_2 *K-_sage_const_1 , _sage_const_2 *K-_sage_const_1 )
    points_eval = [_sage_const_0  for i in range(_sage_const_2 *K-_sage_const_1 )]
    points_eval[_sage_const_1 ] = infinity
    points_eval[_sage_const_2 ] = _sage_const_1 
    points_eval[_sage_const_3 ] = -_sage_const_1 
    for i in range(_sage_const_1 ,int((K-_sage_const_1 )/_sage_const_2 )) :
        points_eval[_sage_const_4 *i] = _sage_const_2 **i
        points_eval[_sage_const_4 *i+_sage_const_1 ] = - _sage_const_2 **i
        points_eval[_sage_const_4 *i+_sage_const_2 ] = _sage_const_2 **(-i)
        points_eval[_sage_const_4 *i+_sage_const_3 ] = - _sage_const_2 **(-i)
    if (K % _sage_const_2  == _sage_const_0 ) :
        points_eval[_sage_const_2 *K-_sage_const_4 ] = _sage_const_2 **((K-_sage_const_2 )/_sage_const_2 )
        points_eval[_sage_const_2 *K-_sage_const_3 ] = - _sage_const_2 **((K-_sage_const_2 )/_sage_const_2 )
        points_eval[_sage_const_2 *K-_sage_const_2 ] = _sage_const_2 **(-(K-_sage_const_2 )/_sage_const_2 )
    else :
        points_eval[_sage_const_2 *K-_sage_const_2 ] = _sage_const_2 **((K-_sage_const_1 )/_sage_const_2 )
    #print points_eval
    matrix_eval[_sage_const_0 ,_sage_const_0 ] = _sage_const_1 
    matrix_eval[_sage_const_1 ,_sage_const_2 *K-_sage_const_2 ] = _sage_const_1 
    for i in range(_sage_const_2 ,_sage_const_2 *K-_sage_const_1 ) :
        if (points_eval[i] == int(points_eval[i])) :
            for j in range(_sage_const_2 *K-_sage_const_1 ) :
                matrix_eval[i,j] = points_eval[i]**j
        else :
            for j in range(_sage_const_2 *K-_sage_const_1 ) :
                matrix_eval[i,j] = points_eval[i]**(j-_sage_const_2 *K+_sage_const_2 )
    #return(matrix_eval)
    matrix_interpol = matrix_eval.inverse()
    for i in range(_sage_const_2 ,_sage_const_2 *K-_sage_const_1 ) :
        if (points_eval[i] != int(points_eval[i])) :
            for j in range(_sage_const_2 *K-_sage_const_1 ) :
                matrix_eval[i,j] = points_eval[i]**(j-K+_sage_const_1 )
    matrix_eval[_sage_const_1 ,K-_sage_const_1 ] = _sage_const_1 
    for i in range(_sage_const_2 *K-_sage_const_1 ) :
        for j in range(_sage_const_2 *K-_sage_const_1 ) :
            matrix_interpol[i,j] = cmod(int(GF(q)(matrix_interpol[i,j])),q)
    return(str(sage_input(matrix_eval.delete_columns(range(K,_sage_const_2 *K-_sage_const_1 ))))[_sage_const_11 :-_sage_const_1 ],
           str(sage_input(matrix_interpol))[_sage_const_11 :-_sage_const_1 ])

def Toom_Matrix3 (K,q) :
    # input is the size of the toom
    assert (K == int(K) and K >= _sage_const_3 )
    # output is a 2-dimensional array, the Toom interpolation matrix mod q
    matrix_eval = matrix(QQ, _sage_const_2 *K-_sage_const_1 , _sage_const_2 *K-_sage_const_1 )
    points_eval = [_sage_const_0  for i in range(_sage_const_2 *K-_sage_const_1 )]
    points_eval[_sage_const_1 ] = infinity
    points_eval[_sage_const_2 ] = _sage_const_1 
    points_eval[_sage_const_3 ] = -_sage_const_1 
    for i in range(_sage_const_1 ,int((K-_sage_const_1 )/_sage_const_2 )) :
        points_eval[_sage_const_4 *i] = _sage_const_2 **i
        points_eval[_sage_const_4 *i+_sage_const_1 ] = - _sage_const_2 **i
        points_eval[_sage_const_4 *i+_sage_const_2 ] = _sage_const_2 **(-i)
        points_eval[_sage_const_4 *i+_sage_const_3 ] = - _sage_const_2 **(-i)
    if (K % _sage_const_2  == _sage_const_0 ) :
        points_eval[_sage_const_2 *K-_sage_const_4 ] = _sage_const_2 **((K-_sage_const_2 )/_sage_const_2 )
        points_eval[_sage_const_2 *K-_sage_const_3 ] = - _sage_const_2 **((K-_sage_const_2 )/_sage_const_2 )
        points_eval[_sage_const_2 *K-_sage_const_2 ] = _sage_const_2 **(-(K-_sage_const_2 )/_sage_const_2 )
    else :
        points_eval[_sage_const_2 *K-_sage_const_2 ] = _sage_const_2 **((K-_sage_const_1 )/_sage_const_2 )
    #print points_eval
    matrix_eval[_sage_const_0 ,_sage_const_0 ] = _sage_const_1 
    matrix_eval[_sage_const_1 ,_sage_const_2 *K-_sage_const_2 ] = _sage_const_1 
    for i in range(_sage_const_2 ,_sage_const_2 *K-_sage_const_1 ) :
        if (points_eval[i] == int(points_eval[i])) :
            for j in range(_sage_const_2 *K-_sage_const_1 ) :
                matrix_eval[i,j] = points_eval[i]**j
        else :
            for j in range(_sage_const_2 *K-_sage_const_1 ) :
                matrix_eval[i,j] = points_eval[i]**(j-_sage_const_2 *K+_sage_const_2 )
    #return(matrix_eval)
    matrix_interpol = matrix_eval.inverse()
    for i in range(_sage_const_2 ,_sage_const_2 *K-_sage_const_1 ) :
        if (points_eval[i] != int(points_eval[i])) :
            for j in range(_sage_const_2 *K-_sage_const_1 ) :
                matrix_eval[i,j] = points_eval[i]**(j-K+_sage_const_1 )
    matrix_eval[_sage_const_1 ,K-_sage_const_1 ] = _sage_const_1 
    k = _sage_const_0 
    for i in range(_sage_const_2 *K-_sage_const_1 ) :
        for j in range(_sage_const_2 *K-_sage_const_1 ) :
            fd = factor(denominator(matrix_interpol[i,j]))
            if (_sage_const_2  in [p for p,e in fd]) :
                for p,e in fd :
                    if (p == _sage_const_2 ) : k = max(k, e)
    for i in range(_sage_const_2 *K-_sage_const_1 ) :
        for j in range(_sage_const_2 *K-_sage_const_1 ) :
            matrix_interpol[i,j] = cmod(matrix_interpol[i,j]*(_sage_const_2 **k),q)
            #print(matrix_interpol[i,j])
    #return((matrix_eval,matrix_interpol,points_eval,2**k))
    return(str(sage_input(matrix_eval.delete_columns(range(K,_sage_const_2 *K-_sage_const_1 ))))[_sage_const_11 :-_sage_const_1 ],
           str(sage_input(matrix_interpol))[_sage_const_11 :-_sage_const_1 ],_sage_const_2 **k)

    
try : K = int(sys.argv[_sage_const_1 ])
except : K = _sage_const_4 

try : q = int(sys.argv[_sage_const_2 ])
except : q = _sage_const_8192 

    
Toom_Matrix3 (K,q) 

